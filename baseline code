pip uninstall --y kaggle
pip install --upgrade pip
pip install kaggle==1.5.6


mkdir -p ~/.kaggle
cp kaggle.json ~/.kaggle/
chmod 600 ~/.kaggle/kaggle.json


#버전 확인
kaggle -v


import os
import torch
import numpy as np
import pandas as pd

#데이터 정규화 위해 사용
from sklearn.preprocessing import MinMaxScaler


scaler=MinMaxScaler()

xy_train=np.loadtxt('train_data.csv',delimiter=',',dtype=np.float32, skiprows=1,usecols=range(0,8))  
#부번 제외 -> 1열 삭제
xy_train=np.delete(xy_train,(1),axis=1)

#데이터 정규화
x_train=scaler.fit_transform(xy_train[:,0:-1])      

x_train=torch.from_numpy(x_train)
y_train=torch.from_numpy(xy_train[:,[-1]])


xy_test=np.loadtxt('my_test.csv',delimiter=',',dtype=np.float32, skiprows=1,usecols=range(0,7)) 
#부번 제외
xy_test=np.delete(xy_test,(1),axis=1)      

#데이터 정규화
xy_test=scaler.fit_transform(xy_test)    

x_test=torch.from_numpy(xy_test)


#확인 -> 크기 6
print(x_train[:3])
print(y_train[:3])
print(x_test[:3])
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)


W=torch.zeros((6,1),requires_grad=True)
b=torch.zeros(1,requires_grad=True)

optimizer=torch.optim.SGD([W,b],lr=1e-3)

epochs=10000

for epoch in range(epochs):
  hypothesis=x_train.matmul(W)+b 
  cost=torch.mean((hypothesis-y_train)**2)

  #gradient 값 리셋, 업데이트 -> W,b 업데이트
  optimizer.zero_grad()    
  cost.backward()  
  optimizer.step()  

  if epoch %1000==0:
    # 학습 잘 진행중인지 확인 위해 스칼라 값으로 출력
    print("Epoch : {} , Cost : {}".format(epoch,cost.item()))    
    
    
# 확인 
print(W)
print(b)


#테스트 데이터
predict=x_test.matmul(W)+b
print(predict[:5])


#폼 불러오기
submit=pd.read_csv('submit_form.csv')


#형식에 맞춰서 넣기
for i in range(len(predict)):
  submit['price'][i]=predict[i].item()
  
  
#제출 
submit


#파일을 csv로 저장
submit.to_csv('baseline.csv',index=False,header=True)


#업로드
! kaggle competitions submit -c predict-seoul-house-price -f baseline.csv -m "baseline"
